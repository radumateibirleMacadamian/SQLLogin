/*
Deployment script for LoginExample

This code was generated by a tool.
Changes to this file may cause incorrect behavior and will be lost if
the code is regenerated.
*/

GO
SET ANSI_NULLS, ANSI_PADDING, ANSI_WARNINGS, ARITHABORT, CONCAT_NULL_YIELDS_NULL, QUOTED_IDENTIFIER ON;

SET NUMERIC_ROUNDABORT OFF;


GO
:setvar DatabaseName "LoginExample"
:setvar DefaultFilePrefix "LoginExample"
:setvar DefaultDataPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"
:setvar DefaultLogPath "C:\Program Files\Microsoft SQL Server\MSSQL14.MSSQLSERVER\MSSQL\DATA\"

GO
:on error exit
GO
/*
Detect SQLCMD mode and disable script execution if SQLCMD mode is not supported.
To re-enable the script after enabling SQLCMD mode, execute the following:
SET NOEXEC OFF; 
*/
:setvar __IsSqlCmdEnabled "True"
GO
IF N'$(__IsSqlCmdEnabled)' NOT LIKE N'True'
    BEGIN
        PRINT N'SQLCMD mode must be enabled to successfully execute this script.';
        SET NOEXEC ON;
    END


GO
USE [$(DatabaseName)];


GO
PRINT N'Altering [dbo].[AddDetails]...';


GO
ALTER PROCEDURE [dbo].[AddDetails]
	@Email NVARCHAR(50),
    @PhoneNumber NCHAR (14),
    @Address NVARCHAR (50),
    @City NVARCHAR (20),
    @Country NVARCHAR (20)
AS
	DECLARE 
	@DetailsID int,
	@UserID int

	INSERT INTO PersonalDetails (PhoneNumber, Address, City, Country, IsDeleted) VALUES (@PhoneNumber, @Address, @City, @Country, 0)
	SELECT @DetailsID = SCOPE_IDENTITY()
	
	UPDATE [User] SET Details = @DetailsID where Email = @Email
	SELECT @UserID = ID FROM [User] WHERE Email = @Email
	
	INSERT INTO [Log] (UserID, Message) VALUES (@UserID, concat('User ' + @Email + ' had details added at ID ' ,@DetailsID))
RETURN 0
GO
PRINT N'Altering [dbo].[AddUser]...';


GO
ALTER PROCEDURE [dbo].[AddUser]
	@Email nvarchar(50),
	@Password nvarchar(30),
	@FirstName nvarchar(40),
	@LastName nvarchar(20),
	@DisplayName nvarchar(20)
AS
	DECLARE 
	@HashedPassword nchar(64),
	@UserID int

	SELECT @HashedPassword = HASHBYTES('SHA2_256', @Password)

	INSERT INTO [User]  (Email, Password, FirstName, LastName, DisplayName, IsDeleted) VALUES (@Email, @HashedPassword, @FirstName, @LastName , @DisplayName, 0)
	SELECT @UserID = SCOPE_IDENTITY()
	
	INSERT INTO [Log] (UserID, Message) VALUES (@UserID, 'User with Email ' + @Email + ' was created')

RETURN 0
GO
PRINT N'Altering [dbo].[Login]...';


GO
ALTER PROCEDURE [dbo].[Login]
	@Email nvarchar(50),
	@Password nvarchar(30),
	@Response nvarchar(20) OUT
AS
	DECLARE
	@RetrievedDisplayName nvarchar(20),
	@RetrievedPass nvarchar(64),
	@RetrievedID int = -1,
	@HashedPass nchar(64)

	SELECT @RetrievedPass = Password, @RetrievedID = ID, @RetrievedDisplayName = DisplayName FROM [User]
	WHERE Email = @Email

	IF (@RetrievedID = -1) 
	BEGIN
		INSERT INTO [Log] (UserID, Message) VALUES (null, 'Login unsuccessful. Email ' + @Email + ' not found')
		SET @Response = 'ERROR'
		RETURN -1
	END
	
	SELECT @HashedPass = HASHBYTES('SHA2_256', @Password)

	IF(@HashedPass = @RetrievedPass)
	BEGIN
		INSERT INTO [Log] (UserID, Message) VALUES (@RetrievedID, 'Login successful. Email ' + @Email + ' and password were correct')
		SET @Response = @RetrievedDisplayName
		RETURN 1
	END

	ELSE 
	BEGIN
		INSERT INTO [Log] (UserID, Message) VALUES (@RetrievedID, 'Login unsuccessful. ' + @Email + ', password was incorrect')
		SET @Response = 'ERROR'
		RETURN 0
	END
GO
PRINT N'Creating [dbo].[MakeAdmin]...';


GO
CREATE PROCEDURE [dbo].[MakeAdmin]
	@Email nvarchar(50)
AS
	DECLARE
	@RetrievedUserID int,
	@RetrievedPermissionID int

	SELECT @RetrievedUserID = ID FROM [User] WHERE Email = @Email
	SELECT @RetrievedPermissionID = ID FROM [Permission] WHERE RTRIM(Name) LIKE '% Administrator'

	INSERT INTO [UserHasPermission] (UserID, PermissionID, IsDeleted) VALUES (@RetrievedUserID, @RetrievedPermissionID, 0)
	INSERT INTO [Log] (UserID, Message) VALUES (@RetrievedUserID, 'User with Email ' + @Email + ' was given Administrator permission')
RETURN 0
GO
PRINT N'Creating [dbo].[MakeSealed]...';


GO
CREATE PROCEDURE [dbo].[MakeSealed]
	@Email nvarchar(50)
AS
	DECLARE
	@RetrievedUserID int,
	@RetrievedPermissionID int

	SELECT @RetrievedUserID = ID FROM [User] WHERE Email = @Email
	SELECT @RetrievedPermissionID = ID FROM [Permission] WHERE RTRIM(Name) LIKE '% Sealed'

	INSERT INTO [UserHasPermission] (UserID, PermissionID, IsDeleted) VALUES (@RetrievedUserID, @RetrievedPermissionID, 0)
	INSERT INTO [Log] (UserID, Message) VALUES (@RetrievedUserID, 'User with Email ' + @Email + ' was given Sealed permission')
RETURN 0
GO
PRINT N'Creating [dbo].[MakeSysAdmin]...';


GO
CREATE PROCEDURE [dbo].[MakeSysAdmin]
	@Email nvarchar(50)
AS
	DECLARE
	@RetrievedUserID int,
	@RetrievedPermissionID int

	SELECT @RetrievedUserID = ID FROM [User] WHERE Email = @Email
	SELECT @RetrievedPermissionID = ID FROM [Permission] WHERE RTRIM(Name) LIKE '% SysAdmin'

	INSERT INTO [UserHasPermission] (UserID, PermissionID, IsDeleted) VALUES (@RetrievedUserID, @RetrievedPermissionID, 0)
	INSERT INTO [Log] (UserID, Message) VALUES (@RetrievedUserID, 'User with Email ' + @Email + ' was given SysAdmin permission')
RETURN 0
GO
PRINT N'Creating [dbo].[MakeUser]...';


GO
CREATE PROCEDURE [dbo].[MakeUser]
	@Email nvarchar(50)
AS
	DECLARE
	@RetrievedUserID int,
	@RetrievedPermissionID int

	SELECT @RetrievedUserID = ID FROM [User] WHERE Email = @Email
	SELECT @RetrievedPermissionID = ID FROM [Permission] WHERE RTRIM(Name) LIKE '% User'

	INSERT INTO [UserHasPermission] (UserID, PermissionID, IsDeleted) VALUES (@RetrievedUserID, @RetrievedPermissionID, 0)
	INSERT INTO [Log] (UserID, Message) VALUES (@RetrievedUserID, 'User with Email ' + @Email + ' was given User permission')
RETURN 0
GO
PRINT N'Update complete.';


GO
